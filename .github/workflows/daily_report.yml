name: Investory Daily Report (Diag)

on:
  workflow_dispatch: {}   # Manuell starten, bis alles stabil ist
  # schedule:
  #   - cron: "0 4 * * 1-5"   # 06:00 Europe/Zurich ~ 04:00 UTC (Sommerzeit)

jobs:
  run:
    runs-on: ubuntu-latest

    env:
      INV_WP_BASE:           ${{ secrets.INV_WP_BASE }}
      INV_WP_USER:           ${{ secrets.INV_WP_USER }}
      INV_WP_APP_PW:         ${{ secrets.INV_WP_APP_PW }}
      INV_LOGO_URL:          ${{ secrets.INV_LOGO_URL }}
      INV_POPPINS_REG_URL:   ${{ secrets.INV_POPPINS_REG_URL }}
      INV_POPPINS_BOLD_URL:  ${{ secrets.INV_POPPINS_BOLD_URL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # NEU: Öffentliche IP des GitHub-Runners ermitteln (für Allowlist beim Hoster/WAF)
      - name: Show egress IP of runner
        run: |
          echo "Runner public IPs:"
          curl -s https://api.ipify.org ; echo
          curl -s https://ifconfig.me ; echo

      - name: Show repo tree (debug)
        run: |
          echo "Working dir:"; pwd
          echo "List files:"; ls -la
          echo "Python version:"; python3 -V

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests reportlab

      - name: Diagnostics (assets + WP auth)
        run: |
          python - <<'PY'
          import os, requests

          def get(url, auth=None, label=""):
              try:
                  r = requests.get(url, auth=auth, timeout=20)
                  print(f"{label}GET {url} -> {r.status_code}, {len(r.content)} bytes")
                  if r.status_code not in (200, 201):
                      print((r.text or "")[:300])
                  return r
              except Exception as e:
                  print(f"{label}ERROR {url}: {e}")

          print("ENV check:")
          for k in ["INV_WP_BASE","INV_WP_USER","INV_WP_APP_PW","INV_LOGO_URL","INV_POPPINS_REG_URL","INV_POPPINS_BOLD_URL"]:
              print(f"  {k}: {'YES' if os.getenv(k) else 'NO'}")

          # Assets
          for k in ["INV_LOGO_URL","INV_POPPINS_REG_URL","INV_POPPINS_BOLD_URL"]:
              url = os.getenv(k)
              if url:
                  get(url, label="ASSET ")

          # WP endpoints
          base = (os.getenv("INV_WP_BASE") or "").rstrip("/")
          user = os.getenv("INV_WP_USER")
          pw   = os.getenv("INV_WP_APP_PW")

          if base and user and pw:
              get(f"{base}/wp-json", label="WP   ")
              get(f"{base}/wp-json/wp/v2/media", auth=(user,pw), label="AUTH ")
          else:
              print("WP VARS missing.")
          PY

      - name: Generate & upload PDF (pipeline)
        run: |
          python - <<'PY'
          import traceback
          try:
              import daily_report
              # Wichtig: ohne Argument aufrufen
              url = daily_report.run_pdf_pipeline()
              print("RESULT_URL:", url)
          except Exception as e:
              print("PIPELINE ERROR:", e)
              traceback.print_exc()
              raise
          PY
