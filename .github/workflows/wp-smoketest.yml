name: WP Upload Smoke Test

on:
  workflow_dispatch: {}   # Manuell starten

permissions:
  contents: read

jobs:
  smoke:
    runs-on: ubuntu-latest
    env:
      INV_WP_BASE:   ${{ secrets.INV_WP_BASE }}
      INV_WP_USER:   ${{ secrets.INV_WP_USER }}
      INV_WP_APP_PW: ${{ secrets.INV_WP_APP_PW }}

    steps:
      - name: Show runner IPs (info)
        run: |
          echo "Runner public IPs:"
          curl -s https://api.ipify.org ; echo
          curl -s https://ifconfig.me ; echo

      - name: Make tiny PDF on runner
        run: |
          cat > /tmp/smoke.pdf <<'PDF'
          %PDF-1.4
          1 0 obj << /Type /Catalog /Pages 2 0 R >> endobj
          2 0 obj << /Type /Pages /Kids [3 0 R] /Count 1 >> endobj
          3 0 obj << /Type /Page /Parent 2 0 R /MediaBox [0 0 200 200] >> endobj
          trailer << /Root 1 0 R >>
          %%EOF
          PDF
          ls -l /tmp/smoke.pdf

      - name: Try upload (primary endpoint, follow redirects with auth)
        id: up1
        env:
          URL: "${{ env.INV_WP_BASE }}/wp-json/wp/v2/media"
        run: |
          set -euo pipefail
          echo "Endpoint: $URL"
          curl --http1.1 -sS -L --location-trusted \
            -u "${INV_WP_USER}:${INV_WP_APP_PW}" \
            -H "User-Agent: Investory-GHA/1.0" \
            -H "Accept: application/json" \
            -H "Expect:" \
            -H "Connection: close" \
            -H "Content-Disposition: attachment; filename=smoke-$(date +%Y%m%d-%H%M%S).pdf" \
            -F "file=@/tmp/smoke.pdf;type=application/pdf" \
            "$URL" \
            -D /tmp/h1.txt -o /tmp/b1.json || true

          echo "----- Response headers (primary) -----"
          sed -n '1,200p' /tmp/h1.txt || true
          echo "----- Location (primary) -----"
          grep -i '^location:' /tmp/h1.txt || true
          echo "----- Body head (primary) -----"
          head -c 1200 /tmp/b1.json || true; echo

          code=$(awk 'toupper($1)~/^HTTP\//{c=$2} END{print c+0}' /tmp/h1.txt)
          echo "code=$code" >> $GITHUB_OUTPUT
          echo "body=/tmp/b1.json" >> $GITHUB_OUTPUT

      - name: Upload via alt endpoint (index.php?rest_route=â€¦) as fallback
        id: up2
        if: steps.up1.outputs.code != '201'
        env:
          URL: "${{ env.INV_WP_BASE }}/index.php?rest_route=/wp/v2/media"
        run: |
          set -euo pipefail
          echo "Endpoint: $URL"
          curl --http1.1 -sS -L --location-trusted \
            -u "${INV_WP_USER}:${INV_WP_APP_PW}" \
            -H "User-Agent: Investory-GHA/1.0" \
            -H "Accept: application/json" \
            -H "Expect:" \
            -H "Connection: close" \
            -H "Content-Disposition: attachment; filename=smoke-$(date +%Y%m%d-%H%M%S)-alt.pdf" \
            -F "file=@/tmp/smoke.pdf;type=application/pdf" \
            "$URL" \
            -D /tmp/h2.txt -o /tmp/b2.json || true

          echo "----- Response headers (alt) -----"
          sed -n '1,200p' /tmp/h2.txt || true
          echo "----- Location (alt) -----"
          grep -i '^location:' /tmp/h2.txt || true
          echo "----- Body head (alt) -----"
          head -c 1200 /tmp/b2.json || true; echo

          code=$(awk 'toupper($1)~/^HTTP\//{c=$2} END{print c+0}' /tmp/h2.txt)
          echo "code=$code" >> $GITHUB_OUTPUT
          echo "body=/tmp/b2.json" >> $GITHUB_OUTPUT

      - name: Parse responses (accept 200 or 201 if JSON has source_url)
        id: parse
        env:
          B1: ${{ steps.up1.outputs.body }}
          C1: ${{ steps.up1.outputs.code }}
          B2: ${{ steps.up2.outputs.body }}
          C2: ${{ steps.up2.outputs.code }}
        run: |
          set -euo pipefail
          choose_body=""
          if [ "${C1:-0}" -ge 200 ] && [ "${C1:-0}" -lt 400 ]; then
            choose_body="$B1"
          elif [ "${C2:-0}" -ge 200 ] && [ "${C2:-0}" -lt 400 ]; then
            choose_body="$B2"
          else
            choose_body="$B1"
          fi
          echo "Chosen body: $choose_body"
          python - "$choose_body" <<'PY'
          import json,sys
          p=sys.argv[1]
          raw=open(p,'rb').read()
          try:
              data=json.loads(raw.decode('utf-8','replace'))
          except Exception as e:
              print("JSON parse error:", e)
              print("RAW(head):", raw[:300])
              sys.exit(3)
          if isinstance(data, list) and data:
              data=data[0]
          src = data.get("source_url") or (data.get("guid") or {}).get("rendered")
          mid = data.get("id")
          print("ATTACHMENT_ID:", mid)
          print("SOURCE_URL:", src)
          if not src or not str(src).lower().endswith(".pdf"):
              sys.exit(4)
          PY
          echo "OK."

      - name: Final verdict (optional)
        if: steps.up1.outputs.code == '0' && steps.up2.outputs.code == '0'
        run: |
          echo "No HTTP status captured. Check previous steps." >&2
          exit 1
