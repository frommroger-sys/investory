name: WP Upload Smoketest

on:
  workflow_dispatch: {}    # Manuell starten

permissions:
  contents: read

jobs:
  smoke:
    runs-on: ubuntu-latest
    env:
      INV_WP_BASE:   ${{ secrets.INV_WP_BASE }}
      INV_WP_USER:   ${{ secrets.INV_WP_USER }}
      INV_WP_APP_PW: ${{ secrets.INV_WP_APP_PW }}

    steps:
      - name: Show runner IPs (info)
        run: |
          echo "Runner public IPs:"
          curl -s https://api.ipify.org ; echo
          curl -s https://ifconfig.me ; echo

      - name: Make tiny PDF on runner
        run: |
          cat > /tmp/smoke.pdf <<'PDF'
          %PDF-1.4
          1 0 obj << /Type /Catalog /Pages 2 0 R >> endobj
          2 0 obj << /Type /Pages /Kids [3 0 R] /Count 1 >> endobj
          3 0 obj << /Type /Page /Parent 2 0 R /MediaBox [0 0 200 200] >> endobj
          trailer << /Root 1 0 R >>
          %%EOF
          PDF
          ls -l /tmp/smoke.pdf

      - name: Try upload (primary endpoint, follow redirects)
        id: up1
        env:
          URL: "${{ env.INV_WP_BASE }}/wp-json/wp/v2/media"
        run: |
          set -euo pipefail
          echo "Endpoint: $URL"
          curl -i -L \
            -u "${INV_WP_USER}:${INV_WP_APP_PW}" \
            -H "Accept: application/json" \
            -H "Content-Disposition: attachment; filename=smoke-$(date +%Y%m%d-%H%M%S).pdf" \
            -F "file=@/tmp/smoke.pdf;type=application/pdf" \
            "$URL" \
            -D /tmp/h1.txt -o /tmp/b1.json || true

          echo "----- Response headers (primary) -----"
          sed -n '1,200p' /tmp/h1.txt

          echo "----- Response body (primary) -----"
          head -c 1200 /tmp/b1.json; echo

          code=$(awk 'toupper($1)=="HTTP/2"||toupper($1)=="HTTP/1.1"{c=$2} END{print c+0}' /tmp/h1.txt)
          echo "code=$code" >> $GITHUB_OUTPUT

      - name: Fallback upload (alt endpoint) if primary != 201
        id: up2
        if: steps.up1.outputs.code != '201'
        env:
          URL: "${{ env.INV_WP_BASE }}/index.php?rest_route=/wp/v2/media"
        run: |
          set -euo pipefail
          echo "Endpoint: $URL"
          curl -i -L \
            -u "${INV_WP_USER}:${INV_WP_APP_PW}" \
            -H "Accept: application/json" \
            -H "Content-Disposition: attachment; filename=smoke-$(date +%Y%m%d-%H%M%S)-alt.pdf" \
            -F "file=@/tmp/smoke.pdf;type=application/pdf" \
            "$URL" \
            -D /tmp/h2.txt -o /tmp/b2.json || true

          echo "----- Response headers (alt) -----"
          sed -n '1,200p' /tmp/h2.txt

          echo "----- Response body (alt) -----"
          head -c 1200 /tmp/b2.json; echo

          code=$(awk 'toupper($1)=="HTTP/2"||toupper($1)=="HTTP/1.1"{c=$2} END{print c+0}' /tmp/h2.txt)
          echo "code=$code" >> $GITHUB_OUTPUT

      - name: Parse JSON and show source_url
        run: |
          set -euo pipefail
          body="/tmp/b1.json"
          if [ "${{ steps.up1.outputs.code }}" != "201" ]; then
            body="/tmp/b2.json"
          fi

          python - <<'PY'
          import json,sys
          p=sys.argv[1]
          with open(p,'rb') as f:
              raw=f.read()
          try:
              data=json.loads(raw.decode('utf-8','replace'))
          except Exception as e:
              print("JSON parse error:", e)
              print("RAW:", raw[:400])
              sys.exit(1)

          if isinstance(data, list) and data:
              data=data[0]

          src = data.get("source_url") or (data.get("guid") or {}).get("rendered")
          mid = data.get("id")
          print("ATTACHMENT_ID:", mid)
          print("SOURCE_URL:", src)
          if not src or not str(src).lower().endswith(".pdf"):
              print("ERROR: No valid PDF source_url in response.")
              sys.exit(2)
          PY
          echo "OK."

      - name: Fail if neither endpoint returned 201
        if: steps.up1.outputs.code != '201' && steps.up2.outputs.code != '201'
        run: |
          echo "Both endpoints failed to return 201 Created. Check headers/body above." >&2
          exit 1
